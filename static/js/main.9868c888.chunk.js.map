{"version":3,"sources":["components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","handleInput","bind","assertThisInitialized","handleSave","e","target","value","setState","console","log","props","onAddTodo","preventDefault","react_default","a","createElement","type","onChange","className","onClick","Component","App","todos","hadleAddTodo","todo","toConsumableArray","concat","index","filter","elm","i","_this2","map","handleDelete","components_TodoForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAyCeA,cArCX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAO,CACRC,KAAK,IAETR,EAAKS,YAAcT,EAAKS,YAAYC,KAAjBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACnBA,EAAKY,WAAaZ,EAAKY,WAAWF,KAAhBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KANTA,2EAWDa,GACR,IAAML,EAAOK,EAAEC,OAAOC,MACtBZ,KAAKa,SAAS,CACVR,SAEJS,QAAQC,IAAIf,KAAKI,0CAIVM,GACPV,KAAKgB,MAAMC,UAAUjB,KAAKI,OAC1BM,EAAEQ,iBACFJ,QAAQC,IAAI,2CAKZ,OACII,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOC,KAAK,OAAQC,SAAUvB,KAAKM,cACnCa,EAAAC,EAAAC,cAAA,UAAQC,KAAK,SAASE,UAAU,0BAA0BC,QAASzB,KAAKS,YAAxE,mBAhCOiB,aC8CRC,cA1Cb,SAAAA,IAAa,IAAA9B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2B,IACX9B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6B,GAAAxB,KAAAH,QACKI,MAAM,CACTwB,WAEF/B,EAAKgC,aAAahC,EAAKgC,aAAatB,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KALPA,4EAQAiC,GACX9B,KAAKa,SAAS,CACZe,MAAM9B,OAAAiC,EAAA,EAAAjC,CAAIE,KAAKI,MAAMwB,OAAhBI,OAAA,CAAuBF,2CAGnBG,GACXjC,KAAKa,SAAS,CACZe,MAAO5B,KAAKI,MAAMwB,MAAMM,OAAO,SAACC,EAAIC,GAAL,OAASA,IAAMH,uCAGzC,IAAAI,EAAArC,KACD4B,EAAQ5B,KAAKI,MAAMwB,MAAMU,IAAI,SAACH,EAAKC,GACvC,OACEjB,EAAAC,EAAAC,cAAA,WACCc,EAAI9B,KACLc,EAAAC,EAAAC,cAAA,UAAQC,KAAK,SAASE,UAAU,yBAAyBC,QAASY,EAAKE,aAAahC,KAAK8B,EAAKD,IAA9F,eAMJ,OACEjB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OAEbL,EAAAC,EAAAC,cAACmB,EAAD,CAAUvB,UAAWjB,KAAK6B,eAC1BV,EAAAC,EAAAC,cAAA,WACEO,WAnCQF,aCIEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SDkH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9868c888.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n\r\nclass TodoForm extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state ={\r\n            text:''\r\n        }\r\n        this.handleInput = this.handleInput.bind(this)\r\n        this.handleSave = this.handleSave.bind(this)\r\n        \r\n    }\r\n    \r\n\r\n    handleInput(e){\r\n        const text = e.target.value;\r\n        this.setState({\r\n            text\r\n        })\r\n        console.log(this.state);\r\n        \r\n    }\r\n\r\n    handleSave(e){\r\n        this.props.onAddTodo(this.state)\r\n        e.preventDefault()\r\n        console.log('saving');\r\n        \r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <input type=\"text\"  onChange={this.handleInput}/>\r\n                <button type=\"button\" className=\"btn btn-outline-success\" onClick={this.handleSave}>Agregar</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoForm;","import React, { Component } from 'react';\nimport './App.css';\nimport { todos } from './todos.json';\nimport TodoForm from './components/TodoForm';\n\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state={\n      todos\n    }\n    this.hadleAddTodo=this.hadleAddTodo.bind(this)\n  }\n\n  hadleAddTodo(todo){\n    this.setState({\n      todos:[...this.state.todos, todo]\n    })\n  }\n  handleDelete(index){\n    this.setState({\n      todos: this.state.todos.filter((elm,i)=>i !== index)\n    })\n  }\n  render() {\n    const todos = this.state.todos.map((elm, i)=>{\n      return (\n        <div >\n        {elm.text}\n        <button type=\"button\" className=\"btn btn-outline-danger\" onClick={this.handleDelete.bind(this,i)}>Eliminar</button>\n        </div>\n        \n      )\n    })\n    \n    return (\n      <div className=\"App\">   \n          \n        <TodoForm onAddTodo={this.hadleAddTodo}/>\n        <div>\n         {todos}\n        \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}